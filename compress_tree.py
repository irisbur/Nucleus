from math import log2

KEY_EXTENDED_LEN = 9

LENGTH_LEN = 16

JUMPS_BIT = 30

d = {'01110010': '000000', '11': '0000010', '00101001': '000001100', '10111000': '00000110100', '00100011': '00000110101', '00111110': '00000110110', '00111100': '00000110111', '01010010': '000001110', '38': '00000111100', '30': '00000111101', '00111111': '00000111110', '01011010': '000001111110', '115': '00000111111100', '01011110': '00000111111101', '10111101': '00000111111110', '10011111': '00000111111111', '01110011': '000010', '00110110': '00001100', '00111010': '00001101', '14': '00001110', '00101000': '000011110', '10010101': '00001111100', '11000011': '00001111101', '29': '00001111110', '34': '00001111111', '01101110': '000100', '00110100': '00010100', '13': '00010101', '01101000': '0001011', '01110111': '00011000', '01010011': '00011001', '23': '0001101000', '27': '0001101001', '32': '0001101010', '48': '00011010110000', '80': '00011010110001', '45': '00011010110010', '75': '00011010110011', '202': '00011010110100', '168': '00011010110101', '204': '00011010110110', '121': '00011010110111', '72': '00011010111000', '176': '00011010111001', '103': '00011010111010', '227': '00011010111011', '228': '00011010111100', '99': '00011010111101', '219': '00011010111110', '69': '00011010111111', '00111001': '00011011', '01110100': '000111', '5': '0010', '01101100': '001100', '01110110': '00110100', '01000011': '00110101', '00110001': '0011011', '00110000': '0011100', '20': '001110100', '169': '00111010100000', '118': '00111010100001', '98': '00111010100010', '114': '00111010100011', '217': '00111010100100', '167': '00111010100101', '67': '00111010100110', '100': '00111010100111', '81': '00111010101000', '11000101': '00111010101001', '10101010': '00111010101010', '10110101': '00111010101011', '10000000': '00111010101100', '11000100': '00111010101101', '11101001': '00111010101110', '10000110': '00111010101111', '10001000': '00111010110000', '10101110': '00111010110001', '11100111': '00111010110010', '10010111': '00111010110011', '11101100': '00111010110100', '11101010': '00111010110101', '10010010': '00111010110110', '10010000': '00111010110111', '01111110': '00111010111000', '00000010': '00111010111001', '00000101': '00111010111010', '00001000': '00111010111011', '00000110': '00111010111100', '00001110': '00111010111101', '10101011': '0011101011111', '01101011': '00111011', '01010100': '00111100', '61': '0011110100000', '11000010': '0011110100001', '113': '0011110100010', '86': '0011110100011', '57': '0011110100100', '10111001': '0011110100101', '10000001': '0011110100110', '11100101': '0011110100111', '10110100': '0011110101000', '10010100': '0011110101001', '11101101': '0011110101010', '10100110': '0011110101011', '10000101': '0011110101100', '10111100': '0011110101101', '71': '0011110101110', '43': '0011110101111', '68': '0011110110000', '64': '0011110110001', '49': '0011110110010', '00100010': '0011110110011', '55': '001111011010', '102': '001111011011', '01011100': '001111011100', '10011110': '001111011101', '10100001': '001111011110', '10000100': '001111011111', '10100100': '001111100000', '255': '001111100001', '59': '001111100010', '00100110': '001111100011', '108': '00111110010', '11100000': '00111110011', '10000011': '00111110100', '46': '00111110101', '26': '0011111011', '28': '0011111100', '00111011': '0011111101', '11010111': '001111111', '00100000': '01000', '01100101': '01001', '9': '010100', '01011011': '0101010', '01000001': '01010110', '01001000': '010101110', '42': '01010111100', '01010001': '010101111010', '10011000': '010101111011', '00101010': '0101011111', '7': '01011', '01100010': '0110000', '00110111': '01100010', '16': '011000110', '01010101': '011000111', '00100111': '0110010', '15': '01100110', '00110101': '01100111', '00101111': '01101000', '00111000': '01101001', '01001101': '01101010', '101': '01101011000', '47': '01101011001', '54': '0110101101', '21': '011010111', '01000101': '011011000', '18': '011011001', '01000100': '01101101', '00101100': '01101110', '01000110': '011011110', '00000000': '0110111110', '10011001': '01101111110', '153': '011011111110', '00100101': '011011111111', '01100001': '01110', '01100111': '0111100', '00110010': '0111101', '01010000': '01111100', '24': '0111110100', '56': '0111110101', '52': '0111110110', '35': '0111110111', '01111001': '0111111', '4': '100', '17': '101000000', '25': '101000001', '01111000': '10100001', '01100110': '1010001', '01111100': '1010010', '01111101': '1010011000', '33': '101001100100', '58': '101001100101', '36': '101001100110', '50': '101001100111', '01101010': '101001101', '01000111': '101001110', '10100000': '101001111000', '10101101': '101001111001', '10001010': '101001111010', '10100111': '101001111011', '10100011': '101001111100', '10011100': '101001111101', '10101000': '101001111110', '39': '101001111111', '01101111': '10101', '01110101': '101100', '37': '101101000000', '41': '101101000001', '62': '101101000010', '00000001': '101101000011', '107': '10110100010', '11011001': '10110100011', '10110011': '10110100100', '31': '10110100101', '00100001': '10110100110', '44': '10110100111', '01011000': '10110101000', '40': '10110101001', '01001010': '1011010101', '19': '101101011', '00101110': '1011011', '01101001': '10111', '6': '1100', '01100100': '110100', '01011111': '110101000', '01001011': '1101010010', '51': '1101010011', '01111010': '110101010', '01001110': '110101011', '01010111': '110101100', '01111011': '110101101', '00111101': '11010111', '8': '11011', '00001010': '1110000', '00110011': '1110001', '10': '111001', '01001001': '11101000', '01001100': '11101001', '00101101': '1110101', '01100011': '111011', '53': '1111000000', '11100011': '1111000001', '00101011': '1111000010', '01110001': '1111000011', '01001111': '111100010', '01010110': '111100011', '12': '1111001', '01101101': '111101', '01110000': '111110', '01011101': '1111110', '01000010': '11111110', '22': '111111110', '11011000': '11111111100', '10000010': '11111111101', '10101001': '11111111110', '01011001': '11111111111'}
print(len(d))

def pad(num, to_bits_num):
    if len(num) < to_bits_num:
        return "0" * (to_bits_num - len(num)) + num
    return num


def pad_from_right(num, to_bits_num):
    if len(num) < to_bits_num:
        return num + "0" * (to_bits_num - len(num))
    return num


def dem_to_bin(ip_val):
    if ip_val >= 1:
        return dem_to_bin(ip_val // 2) + str(ip_val % 2)
    return ''


def bin_to_dem(bin_num):
    return int(bin_num, 2)


def sort_by_value_length(dictionary):
    sorted_list = sorted(dictionary, key=lambda item: len(dictionary[item]))
    l = []
    for k in sorted_list:
        if len(k) == 8:
            l.append(["0" + k, dictionary[k]])
        else:
            l.append(["1" + pad(dem_to_bin(int(k)), 8), dictionary[k]])
    return l

"""[['001110010', '000000'], ['100001011', '0000010'], ['000101001', '000001100']]"""
def compress_tree(dict_tree):
    sort_by_val = sort_by_value_length(dict_tree)
    bits_string = ""
    length = dem_to_bin(len(dict_tree))
    length = pad(length, 16)

    jumps = []
    key_len = 1
    for i in range(len(sort_by_val)):
        while len(sort_by_val[i][1]) > key_len:
            jumps.append(i)
            key_len += 1
        bits_string += sort_by_val[i][0] + sort_by_val[i][1]
    print(jumps)
    jumps_in_10bits = "".join([pad(dem_to_bin(x), JUMPS_BIT) for x in jumps])
    jumps_in_10bits = pad_from_right(jumps_in_10bits, JUMPS_BIT * JUMPS_BIT)
    return length + jumps_in_10bits + bits_string

# [jumps_in_10bits[i: i + 10] for i in range(0, len(jumps_in_10bits), 10)]
def de_compress_tree(bits, d):
    length = bin_to_dem(bits[:LENGTH_LEN])
    jumps = [bin_to_dem(bits[i: i + JUMPS_BIT]) for i in range(LENGTH_LEN, JUMPS_BIT * JUMPS_BIT + LENGTH_LEN, JUMPS_BIT)]
    jumps = [jumps[i] for i in range(len(jumps)) if i == 0 or jumps[i] >= max(jumps[:i]) or jumps[i] > 0]
    key_len = 1
    i = 0
    index = JUMPS_BIT * JUMPS_BIT + LENGTH_LEN
    tree_dict = {}

    while i < length:
        while jumps and i >= jumps[0]:
            key_len += 1
            jumps = jumps[1:]

        key = bits[index: index + KEY_EXTENDED_LEN]
        if key[0] == '0':
            key = key[1:]
        else:
            key = str(bin_to_dem(key[1:]))

        word = bits[index + KEY_EXTENDED_LEN: index + KEY_EXTENDED_LEN + key_len]
        tree_dict[key] = word
        i += 1
        index += KEY_EXTENDED_LEN + key_len
    return tree_dict, length + LENGTH_LEN

